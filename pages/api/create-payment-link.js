import PayOS from "@payos/node";

// Kh·ªüi t·∫°o PayOS ƒê√öNG C√ÅCH (d·∫°ng object)
const payos = new PayOS({
  clientId: process.env.PAYOS_CLIENT_ID,
  apiKey: process.env.PAYOS_API_KEY,
  checksumKey: process.env.PAYOS_CHECKSUM_KEY,
});

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { orderCode, amount, description } = req.body;
const paymentDescription = description || `DH ${orderCode}`;
  if (!orderCode || !amount || !description) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  try {
    const paymentData = {
  orderCode: orderCode,
  amount: amount,
  description: paymentDescription,
  cancelUrl: `${process.env.NEXT_PUBLIC_BASE_URL}`,
  returnUrl: `${process.env.NEXT_PUBLIC_BASE_URL}`,
  // üö® ƒê·∫£m b·∫£o 'items' lu√¥n l√† m·ªôt m·∫£ng, ngay c·∫£ khi r·ªóng üö®
  items: req.body.items || [], // N·∫øu req.body.items l√† undefined, n√≥ s·∫Ω l√† []
};

    // G·ªçi ph∆∞∆°ng th·ª©c t·∫°o link thanh to√°n
    const paymentLink = await payos.createPaymentLink(paymentData);

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu c·∫ßn thi·∫øt cho Frontend
    res.status(200).json({
      error: 0, // D√πng error: 0 cho th√†nh c√¥ng l√† m·ªôt convention t·ªët
      message: 'Success',
      data: {
        bin: paymentLink.bin,
        accountNumber: paymentLink.accountNumber,
        accountName: paymentLink.accountName,
        amount: paymentLink.amount,
        description: paymentLink.description,
        orderCode: paymentLink.orderCode,
        qrCode: paymentLink.qrCode,
        checkoutUrl: paymentLink.checkoutUrl,
      },
    });
  } catch (error) {
    console.error('Failed to create payment link:', error);
    res.status(500).json({ error: 'Failed to create payment link' });
  }
}
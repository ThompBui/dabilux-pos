import PayOS from '@payos/node';
import getRawBody from 'raw-body';

// Kh·ªüi t·∫°o PayOS SDK v·ªõi c√°c bi·∫øn m√¥i tr∆∞·ªùng
const payos = new PayOS(
  process.env.PAYOS_CLIENT_ID,
  process.env.PAYOS_API_KEY,
  process.env.PAYOS_CHECKSUM_KEY
);

export default async function handler(req, res) {
  // Ch·ªâ ch·∫•p nh·∫≠n POST
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    // L·∫•y raw body t·ª´ request
    const raw = await getRawBody(req);
    const rawString = raw.toString('utf-8');
    const bodyJson = JSON.parse(rawString);

    console.log('üì© Webhook received body:', bodyJson);

    // Ki·ªÉm tra ch·ªØ k√Ω (checksum)
    const isValid = payos.verifyPaymentWebhookData(bodyJson);

    if (!isValid) {
      console.warn('‚ùå Invalid signature from PayOS');
      return res.status(400).json({ message: 'Invalid signature' });
    }

    // ‚úÖ D·ªØ li·ªáu h·ª£p l·ªá ‚Äî x·ª≠ l√Ω t·∫°i ƒë√¢y (ghi log, c·∫≠p nh·∫≠t DB, g·ª≠i mail, ...)
    console.log('‚úÖ Webhook h·ª£p l·ªá:', bodyJson);

    return res.status(200).json({ message: 'Webhook received' });
  } catch (err) {
    console.error('‚ùå Webhook error:', err);
    return res.status(500).json({ message: 'Webhook processing failed', error: err.message });
  }
}

// ‚ö†Ô∏è T·∫Øt bodyParser ƒë·ªÉ d√πng raw-body
export const config = {
  api: {
    bodyParser: false,
  },
};
import PayOS from "@payos/node";
import { doc, updateDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../../firebase"; // H√£y ch·∫Øc ch·∫Øn ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng t·ªõi file firebase.js c·ªßa b·∫°n

// S·ª¨A L·ªñI D·ª®T ƒêI·ªÇM: Kh·ªüi t·∫°o PayOS b·∫±ng m·ªôt OBJECT ch·ª©a c√°c key
const payos = new PayOS({
  clientId: process.env.PAYOS_CLIENT_ID,
  apiKey: process.env.PAYOS_API_KEY,
  checksumKey: process.env.PAYOS_CHECKSUM_KEY,
});

export default async function handler(req, res) {
  // Ch·ªâ ch·∫•p nh·∫≠n ph∆∞∆°ng th·ª©c POST
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const webhookData = req.body;

  try {
    // 1. X√°c th·ª±c d·ªØ li·ªáu t·ª´ PayOS g·ª≠i qua
    const verifiedData = payos.verifyPaymentWebhookData(webhookData);

    // N·∫øu x√°c th·ª±c th√†nh c√¥ng, verifiedData s·∫Ω ch·ª©a th√¥ng tin giao d·ªãch
    if (verifiedData) {
      console.log('Webhook ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng:', verifiedData);

      // 2. L·∫•y orderCode t·ª´ d·ªØ li·ªáu ƒë√£ x√°c th·ª±c
      const orderCode = verifiedData.orderCode;

      // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong Firestore
      const transactionRef = doc(db, 'transactions', String(orderCode));
      await updateDoc(transactionRef, {
        status: 'PAID', // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        webhookReceivedAt: serverTimestamp(), // Ghi l·∫°i th·ªùi gian nh·∫≠n webhook
        payosData: verifiedData, // L∆∞u l·∫°i to√†n b·ªô d·ªØ li·ªáu t·ª´ PayOS ƒë·ªÉ ƒë·ªëi so√°t
      });
      
      console.log(`Giao d·ªãch ${orderCode} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh PAID.`);

      // 4. Ph·∫£n h·ªìi th√†nh c√¥ng cho PayOS
      return res.status(200).json({ success: true, message: 'Webhook received and processed.' });
    }
  } catch (error) {
    console.error('X√°c th·ª±c Webhook th·∫•t b·∫°i ho·∫∑c c√≥ l·ªói x·ª≠ l√Ω:', error);
    // N·∫øu x√°c th·ª±c th·∫•t b·∫°i, tr·∫£ v·ªÅ l·ªói 400
    return res.status(400).json({ error: 'Webhook verification failed.' });
  }
  
  // Tr∆∞·ªùng h·ª£p d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá m√† kh√¥ng g√¢y ra l·ªói
  return res.status(400).json({ error: 'Invalid data.' });
}
